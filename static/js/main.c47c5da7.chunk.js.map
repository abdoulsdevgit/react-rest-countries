{"version":3,"sources":["components/header/header.module.css","components/countriesContainer/countriesContainer.module.css","components/country/country.module.css","apis/countries.js","components/country/country.jsx","components/header/header.jsx","components/controls/controls.jsx","components/CountryDetails/countryDetails.jsx","components/countriesContainer/countriesContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","getData","url","a","response","data","fetch","json","Error","Country","props","mode","styles","dark","light","Card","onClick","showDetail","style","width","cursor","className","Img","variant","src","image","Body","Title","name","Text","population","region","capital","withRouter","Container","content","history","push","main","changeMode","Controls","InputGroup","Prepend","id","FormControl","placeholder","aria-label","aria-describedby","value","search","onChange","handleSearch","Form","Control","as","handleSelect","regions","map","index","key","CountryDetails","printLanguages","obj","Object","entries","i","printCurrencies","symbol","reload","border","handleBack","goBack","error","state","country","countriesLoaded","this","match","params","code","setState","Button","flags","svg","alt","official","subregion","tld","domain","currencies","languages","borders","prevProps","valueOf","then","Component","CountryContainer","prevState","event","target","temp","result","filter","common","toLowerCase","includes","trim","length","countries","urls","codeUrl","ready","backup","path","location","pathname","visible","showControls","exact","render","component","cca3","App","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister","catch","console","message"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qBAAqB,MAAQ,sBAAsB,QAAU,wBAAwB,KAAO,qBAAqB,KAAO,uB,mBCAjJD,EAAOC,QAAU,CAAC,KAAO,iCAAiC,MAAQ,kCAAkC,UAAY,wC,mBCAhHD,EAAOC,QAAU,CAAC,KAAO,sBAAsB,MAAQ,uBAAuB,KAAO,sBAAsB,MAAQ,yB,sNCDpGC,E,8EAAf,WAAuBC,GAAvB,iBAAAC,EAAA,6DACQC,EAAW,KACXC,EAAO,KAFf,kBAIyBC,MAAMJ,GAJ/B,cAIQE,EAJR,gBAKqBA,EAASG,OAL9B,OAKQF,EALR,+DAOc,IAAIG,MAAJ,MAPd,iCAUWH,GAVX,2D,mFCqCeI,MAxBf,SAAiBC,GACb,IAAIC,EAAOD,EAAMC,KAAMC,IAAOC,KAAMD,IAAOE,MAC3C,OACE,kBAACC,EAAA,EAAD,CAAMC,QAASN,EAAMO,WAAYC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,WAAaC,UAAWV,GACvF,kBAACI,EAAA,EAAKO,IAAN,CAAUC,QAAQ,MAAMC,IAAKd,EAAMe,QACnC,kBAACV,EAAA,EAAKW,KAAN,KACE,kBAACX,EAAA,EAAKY,MAAN,KAAcjB,EAAMkB,MAEpB,kBAACb,EAAA,EAAKc,KAAN,KACE,0BAAMR,UAAU,oBAAhB,eACCX,EAAMoB,YAET,kBAACf,EAAA,EAAKc,KAAN,KACE,0BAAMR,UAAU,oBAAhB,WADF,IACqDX,EAAMqB,QAE3D,kBAAChB,EAAA,EAAKc,KAAN,KACE,0BAAMR,UAAU,oBAAhB,YADF,IACsDX,EAAMsB,Y,yBCLvDC,mBAlBf,SAAgBvB,GAEZ,IAAIC,EAAOD,EAAMC,KAAOC,IAAOC,KAAMD,IAAOE,MAC5C,OACE,yBAAKO,UAAWV,GACd,kBAACuB,EAAA,EAAD,KACE,yBAAKb,UAAWT,IAAOuB,SACrB,0BAAMnB,QAAS,kBAAKN,EAAM0B,QAAQC,KAAK,MAAMhB,UAAWT,IAAO0B,MAA/D,uBACA,0BAAMjB,UAAWT,IAAOD,KAAMK,QAASN,EAAM6B,YAC1C7B,EAAMC,KAAO,YAAc,oB,wBC2B3B6B,MArCf,SAAkB9B,GAGd,OAEI,6BACI,kBAAC+B,EAAA,EAAD,CAAYpB,UAAU,QAClB,kBAACoB,EAAA,EAAWC,QAAZ,KACI,kBAACD,EAAA,EAAWZ,KAAZ,CAAiBc,GAAG,gBAChB,iDAGZ,kBAACC,EAAA,EAAD,CACIC,YAAY,iBACZC,aAAW,WACXC,mBAAiB,eACjBC,MAAOtC,EAAMuC,OACbC,SAAUxC,EAAMyC,gBAIpB,kBAACV,EAAA,EAAD,KACI,kBAACW,EAAA,EAAKC,QAAN,CAAcC,GAAG,SAASJ,SAAUxC,EAAM6C,cACzC7C,EAAM8C,QAAQC,KAAI,SAAC1B,EAAQ2B,GAC5B,OACI,4BAAQC,IAAKD,EAAOV,MAAOjB,GAC1BA,U,gBCzBd6B,E,kDAEH,WAAYlD,GAAQ,IAAD,8BACf,cAAMA,IAgBVmD,eAAiB,SAACC,GACd,OAAOC,OAAOC,QAAQF,GAAKL,KACvB,WAAeQ,GAAf,uBAAOjB,GAAP,kBAAqB,0BAAMW,IAAKM,GAAX,UAAkBjB,EAAlB,UAnBV,EAuBnBkB,gBAAkB,SAACJ,GACf,OAAOC,OAAOC,QAAQF,GAAKL,KACvB,WAAeQ,GAAf,uBAAOjB,GAAP,kBAAqB,0BAAMW,IAAKM,GAAX,UAAkBjB,EAAMpB,KAAxB,YAAgCoB,EAAMmB,aAzBhD,EAgGnBC,OAAS,SAACC,GACN,EAAK3D,MAAM0B,QAAQC,KAAnB,kBAAmCgC,KAjGpB,EAqGnBC,WAAa,WACT,EAAK5D,MAAM0B,QAAQmC,UApGnB,EAAKrE,IAAM,wCACX,EAAKsE,OAAQ,EACb,EAAKC,MAAQ,CACTC,QAAS,GACTC,iBAAiB,EACjBP,QAAQ,GAPG,E,iMAYfQ,K,SAA8B3E,EAAQ2E,KAAK1E,IAAI0E,KAAKlE,MAAMmE,MAAMC,OAAOC,M,yBAAxDL,Q,WACX,kBAAM,EAAKM,SAAS,CAACL,iBAAiB,K,KADrCK,S,0MAqBA,IAAD,OAGJ,OAAIJ,KAAKH,MAAME,gBAGH,WAAYC,KAAKH,MAAMC,QAChB,sDAKX,6BACI,kBAACO,EAAA,EAAD,CAAQjE,QAAS4D,KAAKN,YAAtB,UACA,6BACI,yBAAK9C,IAAG,UAAKoD,KAAKH,MAAMC,QAAQ,GAAGQ,MAAMC,KAAOC,IAAI,KACpD,6BAGI,6BACI,6BACI,4BAAKR,KAAKH,MAAMC,QAAQ,GAAG9C,KAAKyD,WAGpC,6BACI,2BAAG,+CAAH,IAA+BT,KAAKH,MAAMC,QAAQ,GAAG9C,KAAKyD,UAC1D,+BAAI,8CAA0BT,KAAKH,MAAMC,QAAQ,GAAG5C,YACpD,+BAAI,0CAAJ,IAA2B8C,KAAKH,MAAMC,QAAQ,GAAG3C,QACjD,+BAAI,8CAAJ,IAA+B6C,KAAKH,MAAMC,QAAQ,GAAGY,WACrD,+BAAI,0CAAsBV,KAAKH,MAAMC,QAAQ,GAAG1C,QAAQ,KAI5D,6BACI,2BAAG,oDAAgC4C,KAAKH,MAAMC,QAAQ,GAAGa,IAAI9B,KAAI,SAAC+B,EAAQvB,GAAT,OAAe,0BAAMN,IAAKM,GAAIuB,OAC/F,2BAAG,8CAA0BZ,KAAKV,gBAAgBU,KAAKH,MAAMC,QAAQ,GAAGe,aACxE,2BAAG,6CAAyBb,KAAKf,eAAee,KAAKH,MAAMC,QAAQ,GAAGgB,aAG1E,6BACI,sDAEId,KAAKH,MAAMC,QAAQ,GAAGiB,QAEtBf,KAAKH,MAAMC,QAAQ,GAAGiB,QAAQlC,KAAI,SAACY,EAAQJ,GAAT,OAC9B,kBAACgB,EAAA,EAAD,CAAQtB,IAAKM,EAAGjD,QAAS,kBAAM,EAAKoD,OAAOC,KAAUA,EAArD,QAEA,mEAW7B,8C,yCAcQuB,GAAY,IAAD,OACvBA,EAAUf,MAAMC,OAAOC,KAAKc,YAAcjB,KAAKlE,MAAMmE,MAAMC,OAAOC,MACjE9E,EAAQ2E,KAAK1E,IAAM0E,KAAKlE,MAAMmE,MAAMC,OAAOC,MAAMe,MAAK,SAAAzF,GAAI,OAAI,EAAK2E,SAAS,CAACN,QAAQrE,W,GA7GnE0F,aAmHf9D,cAAW2B,GCvGpBoC,E,kDACF,WAAYtF,GAAQ,IAAD,8BACf,cAAMA,IA0FV6B,WAAa,WACT,EAAKyC,UAAS,SAACiB,GAAD,MAAgB,CAAEtF,MAAOsF,EAAUtF,UA5FlC,EAgGnBwC,aAhGmB,uCAgGJ,WAAO+C,GAAP,iBAAA/F,EAAA,sEACL,EAAK6E,SAAS,CAAE/B,OAAQiD,EAAMC,OAAOnD,QADhC,uBAGU/C,EAAQ,EAAKC,KAHvB,OAGHkG,EAHG,QAKHC,EAASD,EAAKE,QAAO,SAAC5B,GAAD,OAErBA,EAAQ9C,KAAK2E,OACZC,cACAC,SAAS,EAAKhC,MAAMxB,OAAOyD,OAAOF,mBAGhCG,QAAU,EACjB,EAAK3B,SAAS,CAAE4B,UAAU,YAAKP,KAE/B,EAAKrB,SAAS,CAAE4B,UAAU,YAAKR,KAfxB,2CAhGI,wDAmHnB7C,aAnHmB,uCAmHJ,WAAO2C,GAAP,eAAA/F,EAAA,sDAEP0G,EAAO,GAFA,KAGHX,EAAMC,OAAOnD,MAHV,OAIN,UAJM,6BAKP6D,EAAO,qCALA,kCAQPA,EAAI,gDAA4CX,EAAMC,OAAOnD,OARtD,mDAWsB/C,EAAQ4G,GAX9B,0BAWKD,UAXL,WAWN5B,SAXM,4DAnHI,wDAkInB/D,WAAa,SAACyD,GACV,EAAKhE,MAAM0B,QAAQC,KAAnB,kBAAmCqC,KAjInC,EAAKxE,IAAM,qCACX,EAAK4G,QAAU,wCACf,EAAKrC,MAAQ,CACTmC,UAAW,GACXjG,MAAM,EACNoG,OAAO,EACP9D,OAAQ,GACRO,QAAS,CAAC,QAAS,SAAU,WAAY,OAAQ,SAAU,YAI/D,EAAKwD,OAAS,GAbC,E,iMAiBfpC,K,SAAiC3E,EAAQ2E,KAAK1E,K,yBAA9B0G,U,WAAsC,WAClD,EAAK5B,SAAS,CAAE+B,OAAO,IACvB,EAAKC,OAAL,YAAkB,EAAKvC,MAAMmC,Y,KAF5B5B,S,0JAMC,IAAD,OACDrE,EAAOiE,KAAKH,MAAM9D,KAAOC,IAAOC,KAAOD,IAAOE,MAC9CmG,EAA0D,MAAnDrC,KAAKlE,MAAM0B,QAAQ8E,SAASC,SAAStB,UAC5C,kBAAC,EAAD,CACI1C,aAAcyB,KAAKzB,aACnBF,OAAQ2B,KAAKH,MAAMxB,OACnBO,QAASoB,KAAKH,MAAMjB,QACpBD,aAAcqB,KAAKrB,aACnB6D,QAASxC,KAAKH,MAAM4C,eAE1B,GACF,OACI,kBAAC,IAAD,KACI,oCACI,yBAAKhG,UAAWV,GACZ,kBAAC,EAAD,CAAQA,KAAMiE,KAAKH,MAAM9D,KAAM4B,WAAYqC,KAAKrC,aACpD,kBAACL,EAAA,EAAD,KACK+E,EACD,kBAAC,IAAD,CAAOK,OAAK,EAACL,KAAK,gBAAgBM,OAAQ,gBAAG1C,EAAH,EAAGA,MAAH,EAAUzC,QAAV,OAAwB,kBAAC,EAAD,eAC9DsC,QAASG,EAAMC,OAAOC,MAClBF,EAF0D,CAG1DiC,QAAS,EAAKA,cAK1B,kBAAC,IAAD,CAAOQ,OAAK,EAACL,KAAK,IAAIO,UAAW,SAAC9G,GAAD,OAC7B,oCAEA,yBAAKW,UAAWT,IAAOgG,WAEtB,EAAKnC,MAAMsC,MACN,EAAKtC,MAAMmC,UAAUnD,KAAI,SAACiB,EAAShB,GAEjC,OACA,kBAAC,EAAD,CACIC,IAAKD,EACLjC,MAAOiD,EAAQQ,MAAMC,IACrBvD,KAAM8C,EAAQ9C,KAAK2E,OACnBzE,WAAY4C,EAAQ5C,WACpBC,OAAQ2C,EAAQ3C,OAChBC,QAAS0C,EAAQ1C,QACjBrB,KAAM,EAAK8D,MAAM9D,KACjBM,WAAY,kBAAM,EAAKA,WAAWyD,EAAQ+C,YAYhD,kB,GA/EC1B,aAyIhB9D,cAAY+D,GC9IZ0B,MARf,WACE,OACE,yBAAKrG,UAAU,OACb,kBAAC,EAAD,QCIcsG,QACW,cAA7BC,OAAOV,SAASW,UAEe,UAA7BD,OAAOV,SAASW,UAEhBD,OAAOV,SAASW,SAAShD,MACvB,2D,YCXNiD,IAASP,OACP,kBAAC,IAAMQ,WAAP,KACI,kBAAC,IAAD,KACA,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcpB,MACrBjB,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9D,GACL+D,QAAQ/D,MAAMA,EAAMgE,c","file":"static/js/main.c47c5da7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"header_dark__1jZ2h\",\"light\":\"header_light__1_duY\",\"content\":\"header_content__1yrJt\",\"mode\":\"header_mode__WM5SY\",\"main\":\"header_main__1xC3f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"countriesContainer_dark__kj9s4\",\"light\":\"countriesContainer_light__3vBoH\",\"countries\":\"countriesContainer_countries__2f6qQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"country_dark__N64kp\",\"light\":\"country_light__2s2EC\",\"info\":\"country_info__1faGf\",\"title\":\"country_title__8SzBt\"};","async function getData(url) {\r\n    let response = null;\r\n    let data = null;\r\n    try {\r\n        response = await fetch(url);\r\n        data = await response.json();\r\n    } catch(err) {\r\n        throw new Error(err);\r\n    }\r\n    \r\n    return data;\r\n}\r\n\r\n\r\nexport {getData}","import React from 'react';\r\nimport styles from './country.module.css';\r\n\r\nimport Card from 'react-bootstrap/Card';\r\n/**\r\n * image\r\n * Name \r\n * Population\r\n * Region\r\n * Capital\r\n */\r\n\r\n\r\nfunction Country(props) {\r\n    let mode = props.mode? styles.dark: styles.light;\r\n    return (\r\n      <Card onClick={props.showDetail} style={{ width: \"100%\", cursor: \"pointer\" }} className={mode}>\r\n        <Card.Img variant=\"top\" src={props.image} />\r\n        <Card.Body>\r\n          <Card.Title >{props.name}</Card.Title>\r\n\r\n          <Card.Text>\r\n            <span className=\"font-weight-bold\">Population:</span>\r\n            {props.population}\r\n          </Card.Text>\r\n          <Card.Text>\r\n            <span className=\"font-weight-bold\">Region:</span> {props.region}\r\n          </Card.Text>\r\n          <Card.Text>\r\n            <span className=\"font-weight-bold\">Capital:</span> {props.capital}\r\n          </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n    \r\n}\r\n\r\nexport default Country;","import React from \"react\";\r\nimport styles from './header.module.css';\r\nimport {Container} from 'react-bootstrap';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\n\r\nfunction Header(props) {\r\n\r\n    let mode = props.mode ? styles.dark: styles.light;\r\n    return (\r\n      <div className={mode}>\r\n        <Container>\r\n          <div className={styles.content}>\r\n            <span onClick={()=> props.history.push(\"/\")} className={styles.main}>Where in the World?</span>\r\n            <span className={styles.mode} onClick={props.changeMode}>\r\n              {props.mode ? \"Dark Mode\" : \"light Mode\"}\r\n            </span>\r\n        </div>\r\n          </Container>\r\n      </div>\r\n    );\r\n}\r\n\r\n// export default Header;\r\nexport default withRouter (Header);","import React from 'react';\r\nimport {InputGroup, FormControl, Form} from 'react-bootstrap';\r\n// import styles from './controls.module.css';\r\n\r\n\r\nfunction Controls(props) {\r\n\r\n    // if props.visible is true show it else change the class.\r\n    return (\r\n        \r\n        <div>\r\n            <InputGroup className=\"mb-3\">\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text id=\"basic-addon1\">\r\n                        <span> &#x1F50D;</span> \r\n                    </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <FormControl\r\n                placeholder=\"Search Country\"\r\n                aria-label=\"Username\"\r\n                aria-describedby=\"basic-addon1\"\r\n                value={props.search}\r\n                onChange={props.handleSearch}\r\n            />\r\n            </InputGroup>\r\n\r\n            <InputGroup>\r\n                <Form.Control as=\"select\" onChange={props.handleSelect}>\r\n                {props.regions.map((region, index) => {\r\n                return (\r\n                    <option key={index} value={region}>\r\n                    {region}\r\n                    </option>\r\n                );\r\n                })}\r\n            </Form.Control>\r\n            \r\n            </InputGroup>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Controls;","import React, { Component} from 'react';\r\nimport {Button} from 'react-bootstrap';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {getData} from '../../apis/countries';\r\n\r\n\r\nclass  CountryDetails extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.url = 'https://restcountries.com/v3.1/alpha/';\r\n        this.error = false;\r\n        this.state = {\r\n            country: [],\r\n            countriesLoaded: false,\r\n            reload: false,\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.setState({country: await getData(this.url+this.props.match.params.code)},\r\n            () => this.setState({countriesLoaded: true})\r\n        )\r\n    }\r\n\r\n    printLanguages = (obj) => {\r\n        return Object.entries(obj).map(\r\n            ([key, value], i) => <span key={i}>{`${value} `}</span>\r\n        )\r\n    }\r\n\r\n    printCurrencies = (obj) => {\r\n        return Object.entries(obj).map(\r\n            ([key, value], i) => <span key={i}>{`${value.name} ${value.symbol}`}</span>\r\n        ) \r\n    }\r\n\r\n    componentWillUnmount() {\r\n        \r\n    }\r\n\r\n    render(){\r\n\r\n        \r\n        if (this.state.countriesLoaded) {\r\n\r\n            // if 404 is the response return this instead.\r\n                if ('status' in this.state.country) {\r\n                    return <h1>Country does not exist</h1>\r\n                }\r\n\r\n            return(\r\n                \r\n                <div>\r\n                    <Button onClick={this.handleBack}> Back </Button>\r\n                    <div>\r\n                        <img src={`${this.state.country[0].flags.svg}`} alt=\"\"/>\r\n                        <div>\r\n                            \r\n                            {/* LeftSide */}\r\n                            <div>\r\n                                <div>\r\n                                    <h3>{this.state.country[0].name.official}</h3>\r\n                                </div>\r\n                                {/* left */}\r\n                                <div>\r\n                                    <p><span>Native Name: </span> {this.state.country[0].name.official}</p>\r\n                                    <p> <span>Population: </span>{this.state.country[0].population}</p>\r\n                                    <p> <span>Region: </span> {this.state.country[0].region}</p>\r\n                                    <p> <span>Sub Region: </span> {this.state.country[0].subregion}</p>\r\n                                    <p> <span>Capital:</span>{this.state.country[0].capital[0]}</p>\r\n                \r\n                                </div>\r\n                                {/* Right */}\r\n                                <div>\r\n                                    <p><span>Top Level Domain: </span>{this.state.country[0].tld.map((domain, i) => <span key={i}>{domain}</span>)}</p>\r\n                                    <p><span>Currencies: </span>{this.printCurrencies(this.state.country[0].currencies)}</p>\r\n                                    <p><span>Languages: </span>{this.printLanguages(this.state.country[0].languages)}</p>\r\n                                </div>\r\n                                {/* broder */}\r\n                                <div>\r\n                                    <span>Bodering Countries: </span>\r\n                                    {\r\n                                        this.state.country[0].borders ?\r\n\r\n                                        this.state.country[0].borders.map((border, i) =>\r\n                                            <Button key={i} onClick={() => this.reload(border)}>{border} </Button>\r\n                                            // <Link to={`detail/${border}`} > {border}</Link>\r\n                                        ) : <span> This country has no borders</span>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n            );\r\n        }\r\n    else {\r\n        return <h1>Getting data</h1>\r\n    }\r\n    }\r\n\r\n    // button \r\n    reload = (border) => {\r\n        this.props.history.push(`/detail/${border}`)\r\n    }\r\n\r\n    // goes back to the previous page\r\n    handleBack = () => {\r\n        this.props.history.goBack();\r\n    }\r\n    \r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.match.params.code.valueOf() !== this.props.match.params.code) {\r\n            getData(this.url + this.props.match.params.code).then(data => this.setState({country:data}));\r\n            \r\n        }\r\n    }\r\n}\r\n\r\nexport default withRouter(CountryDetails);","import React, { Component } from \"react\";\r\nimport { getData } from \"../../apis/countries\";\r\nimport { Switch, Route, withRouter} from \"react-router-dom\";\r\n\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport styles from \"./countriesContainer.module.css\";\r\n\r\n// components\r\nimport Country from \"../country/country\";\r\nimport Header from \"../header/header\";\r\nimport Controls from \"../controls/controls\";\r\n\r\n\r\n// Bootstrap\r\nimport Container from \"react-bootstrap/Container\";\r\nimport CountryDetails from \"../CountryDetails/countryDetails\";\r\n\r\nclass CountryContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.url = \"https://restcountries.com/v3.1/all\";\r\n        this.codeUrl = \"https://restcountries.com/v3.1/alpha/\";\r\n        this.state = {\r\n            countries: [],\r\n            mode: true,\r\n            ready: false,\r\n            search: \"\",\r\n            regions: [\"World\", \"Africa\", \"Americas\", \"Asia\", \"Europe\", \"Oceania\"],\r\n        };\r\n\r\n        //this.ready = false;\r\n        this.backup = [];\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.setState({ countries: await getData(this.url) }, () => {\r\n            this.setState({ ready: true });\r\n            this.backup = [...this.state.countries];\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let mode = this.state.mode ? styles.dark : styles.light;\r\n        let path = this.props.history.location.pathname.valueOf() === \"/\" ?  \r\n            <Controls\r\n                handleSearch={this.handleSearch}\r\n                search={this.state.search}\r\n                regions={this.state.regions}\r\n                handleSelect={this.handleSelect}\r\n                visible={this.state.showControls}\r\n            />\r\n        : '';\r\n        return (\r\n            <Switch>\r\n                <>\r\n                    <div className={mode}>\r\n                        <Header mode={this.state.mode} changeMode={this.changeMode} />\r\n                    <Container>\r\n                        {path}\r\n                        <Route exact path=\"/detail/:code\" render={({ match, history }) => <CountryDetails\r\n                            country={match.params.code}\r\n                            {...match}\r\n                                codeUrl={this.codeUrl}\r\n                            />}\r\n\r\n                        />\r\n                        \r\n                    <Route exact path=\"/\" component={(props) =>\r\n                        <>\r\n                        \r\n                        <div className={styles.countries}>\r\n                            \r\n                        {this.state.ready\r\n                            ? this.state.countries.map((country, index) => {\r\n                                \r\n                                return (\r\n                                <Country\r\n                                    key={index}\r\n                                    image={country.flags.svg}\r\n                                    name={country.name.common}\r\n                                    population={country.population}\r\n                                    region={country.region}\r\n                                    capital={country.capital}\r\n                                    mode={this.state.mode}\r\n                                    showDetail={() => this.showDetail(country.cca3)}\r\n                                    // key={index}\r\n                                    // image={country.flag}\r\n                                    // name={country.name}\r\n                                    // population={country.population}\r\n                                    // region={country.region}\r\n                                    // capital={country.capital}\r\n                                    // mode={this.state.mode}\r\n                                    // showDetail={() => this.showDetail(country.alpha3Code)}\r\n                                />\r\n                                );\r\n                            })\r\n                            : null}\r\n\r\n                    \r\n                        </div>\r\n                        </>\r\n                    }/>\r\n        </Container>\r\n    </div>\r\n    </>\r\n</Switch>\r\n    );\r\n}\r\n\r\n    changeMode = () => {\r\n        this.setState((prevState) => ({ mode: !prevState.mode }));\r\n    };\r\n\r\n  //search\r\n    handleSearch = async (event) => {\r\n        await this.setState({ search: event.target.value });\r\n            \r\n            let temp = await getData(this.url);\r\n           \r\n            let result = temp.filter((country) =>\r\n                //JSON.stringify(country).name\r\n                country.name.common\r\n                .toLowerCase()\r\n                .includes(this.state.search.trim().toLowerCase())\r\n            );\r\n        \r\n        if (result.length >= 1) {\r\n            this.setState({ countries: [...result] });\r\n        } else {\r\n            this.setState({ countries: [...temp] });\r\n        }\r\n    };\r\n\r\n    handleSelect = async (event) => {\r\n        //Africa, Americas, Asia, Europe, Oceania\r\n        let urls = \"\";\r\n        switch (event.target.value) {\r\n        case \"World\":\r\n            urls = \"https://restcountries.com/v3.1/all\";\r\n            break;\r\n        default:\r\n            urls = `https://restcountries.com/v3.1/region/${event.target.value}`;\r\n            break;\r\n        }\r\n        this.setState({ countries: await getData(urls) });\r\n    };\r\n\r\n  // shows the details of the country.\r\n    showDetail = (country) => {\r\n        this.props.history.push(`/detail/${country}`);\r\n    }\r\n\r\n}\r\n\r\nexport default withRouter (CountryContainer);\r\n// export default CountryContainer;\r\n//TODO: The search is breaking when bogus numbers are put in.\r\n/**\r\n *\r\n * Parent container passes mode to each child component\r\n * to tell it to render dark or light mode.\r\n */\r\n\r\n\r\n/**\r\n * TODO: fix the api calls.j\r\n */","import React from 'react';\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\nimport CountryContainer from './components/countriesContainer/countriesContainer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <CountryContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter as Router} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Router>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}