{"version":3,"sources":["components/header/header.module.css","components/countriesContainer/countriesContainer.module.css","components/country/country.module.css","apis/countries.js","components/country/country.jsx","components/header/header.jsx","components/controls/controls.jsx","components/CountryDetails/countryDetails.jsx","components/countriesContainer/countriesContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","getData","url","a","response","data","fetch","json","Error","Country","props","mode","styles","dark","light","Card","onClick","showDetail","style","width","cursor","className","Img","variant","src","image","Body","Title","name","Text","population","region","capital","withRouter","Container","content","history","push","main","changeMode","Controls","InputGroup","Prepend","id","FormControl","placeholder","aria-label","aria-describedby","value","search","onChange","handleSearch","Form","Control","as","handleSelect","regions","map","index","key","CountryDetails","reload","border","handleBack","goBack","error","state","country","countriesLoaded","this","match","params","code","setState","console","log","Button","flag","alt","nativeName","subregion","topLevelDomain","domain","i","currencies","languages","lang","length","borders","prevProps","valueOf","then","Component","CountryContainer","prevState","event","target","temp","backup","result","filter","toLowerCase","includes","trim","countries","urls","codeUrl","ready","path","location","pathname","visible","showControls","exact","render","component","alpha3Code","App","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.fd15a63c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"header_dark__15oSD\",\"light\":\"header_light__l2dxD\",\"content\":\"header_content__2x66L\",\"mode\":\"header_mode__MsDZC\",\"main\":\"header_main__1A3WK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"countriesContainer_dark__3vyxE\",\"light\":\"countriesContainer_light__3Idpd\",\"countries\":\"countriesContainer_countries__1WWN_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"country_dark__2sli9\",\"light\":\"country_light__17fWj\",\"info\":\"country_info__1pOf9\",\"title\":\"country_title__2NRPT\"};","async function getData(url) {\n    let response = null;\n    let data = null;\n    try {\n        response = await fetch(url);\n        data = await response.json();\n    } catch(err) {\n        throw new Error(err);\n    }\n    \n    return data;\n}\n\n\nexport {getData}","import React from 'react';\nimport styles from './country.module.css';\n\nimport Card from 'react-bootstrap/Card';\n/**\n * image\n * Name \n * Population\n * Region\n * Capital\n */\n\n\nfunction Country(props) {\n    let mode = props.mode? styles.dark: styles.light;\n    return (\n      <Card onClick={props.showDetail} style={{ width: \"100%\", cursor: \"pointer\" }} className={mode}>\n        <Card.Img variant=\"top\" src={props.image} />\n        <Card.Body>\n          <Card.Title >{props.name}</Card.Title>\n\n          <Card.Text>\n            <span className=\"font-weight-bold\">Population:</span>\n            {props.population}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"font-weight-bold\">Region:</span> {props.region}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"font-weight-bold\">Capital:</span> {props.capital}\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    );\n    \n}\n\nexport default Country;","import React from \"react\";\nimport styles from './header.module.css';\nimport {Container} from 'react-bootstrap';\nimport {withRouter} from 'react-router-dom';\n\n\nfunction Header(props) {\n\n    let mode = props.mode ? styles.dark: styles.light;\n    return (\n      <div className={mode}>\n        <Container>\n          <div className={styles.content}>\n            <span onClick={()=> props.history.push(\"/\")} className={styles.main}>Where in the World?</span>\n            <span className={styles.mode} onClick={props.changeMode}>\n              {props.mode ? \"Dark Mode\" : \"light Mode\"}\n            </span>\n        </div>\n          </Container>\n      </div>\n    );\n}\n\n// export default Header;\nexport default withRouter (Header);","import React from 'react';\nimport {InputGroup, FormControl, Form} from 'react-bootstrap';\n// import styles from './controls.module.css';\n\n\nfunction Controls(props) {\n\n    // if props.visible is true show it else change the class.\n    return (\n        \n        <div>\n            <InputGroup className=\"mb-3\">\n                <InputGroup.Prepend>\n                    <InputGroup.Text id=\"basic-addon1\">\n                        <span> &#x1F50D;</span> \n                    </InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n                placeholder=\"Search Country\"\n                aria-label=\"Username\"\n                aria-describedby=\"basic-addon1\"\n                value={props.search}\n                onChange={props.handleSearch}\n            />\n            </InputGroup>\n\n            <InputGroup>\n                <Form.Control as=\"select\" onChange={props.handleSelect}>\n                {props.regions.map((region, index) => {\n                return (\n                    <option key={index} value={region}>\n                    {region}\n                    </option>\n                );\n                })}\n            </Form.Control>\n            \n            </InputGroup>\n        </div>\n    );\n}\n\nexport default Controls;","import React, { Component} from 'react';\nimport {Button} from 'react-bootstrap';\nimport { withRouter } from 'react-router-dom';\nimport {getData} from '../../apis/countries';\n\n\nclass  CountryDetails extends Component {\n\n    constructor(props) {\n        super(props);\n        this.url = \"https://restcountries.eu/rest/v2/alpha/\";\n        this.error = false;\n        this.state = {\n            country: [],\n            countriesLoaded: false,\n            reload: false,\n        };\n    }\n\n    async componentDidMount() {\n        this.setState({country: await getData(this.url+this.props.match.params.code)}, \n            () => this.setState({countriesLoaded: true})\n        )\n    }\n\n    componentWillUnmount() {\n        console.log(\"unmounting\");\n    }\n\n    render(){\n\n        \n        if (this.state.countriesLoaded) {\n\n            // if 404 is the response return this instead.\n                if ('status' in this.state.country) {\n                    return <h1>Country does not exist</h1>\n                }\n            \n            return(\n                <div>\n                    <Button onClick={this.handleBack}> Back </Button>\n                    <div>\n                        <img src={`${this.state.country.flag}`} alt=\"\"/>\n                        <div>\n                            \n                            {/* LeftSide */}\n                            <div>\n                                <div>\n                                    <h3>{this.state.country.name}</h3>\n                                </div>\n                                {/* left */}\n                                <div>\n                                    <p><span>Native Name: </span> {this.state.country.nativeName}</p>\n                                    <p> <span>Population: </span>{this.state.country.population}</p>\n                                    <p> <span>Region: </span> {this.state.country.region}</p>\n                                    <p> <span>Sub Region: </span> {this.state.country.subregion}</p>\n                                    <p> <span>Capital:</span>{this.state.country.capital}</p>\n                                </div>\n                                {/* Right */}\n                                <div>\n                                    <p><span>Top Level Domain: </span>{this.state.country.topLevelDomain.map((domain, i) => <span key={i}>{domain}</span>)}</p>\n                                    <p><span>Currencies: </span>{this.state.country.currencies[0].code}</p>\n                                    <p><span>Languages: </span>{this.state.country.languages.map((lang, i) => <span key={i}>{i !== this.state.country.languages.length - 1 ? lang.name + \", \" : lang.name}</span>)}</p>\n                                </div>\n                                {/* broder */}\n                                <div>\n                                    <span>Bodering Countries: </span>\n                                    {\n                                        this.state.country.borders.map((border, i) =>\n                                            <Button key={i} onClick={() => this.reload(border)}>{border} </Button>\n                                            // <Link to={`detail/${border}`} > {border}</Link>\n                                        )\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                \n            );\n        }\n    else {\n        return <h1>Getting data</h1>\n    }\n    }\n\n    // button \n    reload = (border) => {\n        this.props.history.push(`/detail/${border}`)\n    }\n\n    // goes back to the previous page\n    handleBack = () => {\n        this.props.history.goBack();\n    }\n    \n    componentDidUpdate(prevProps) {\n        if(prevProps.match.params.code.valueOf() !== this.props.match.params.code) {\n            getData(this.url + this.props.match.params.code).then(data => this.setState({country:data}));\n            \n        }\n    }\n}\n\nexport default withRouter(CountryDetails);","import React, { Component } from \"react\";\nimport { getData } from \"../../apis/countries\";\nimport { Switch, Route, withRouter} from \"react-router-dom\";\n\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport styles from \"./countriesContainer.module.css\";\n\n// components\nimport Country from \"../country/country\";\nimport Header from \"../header/header\";\nimport Controls from \"../controls/controls\";\n\n\n// Bootstrap\nimport Container from \"react-bootstrap/Container\";\nimport CountryDetails from \"../CountryDetails/countryDetails\";\n\nclass CountryContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.url = \"https://restcountries.eu/rest/v2/all\";\n        this.codeUrl = \"https://restcountries.eu/rest/v2/alpha/\";\n        this.state = {\n            countries: [],\n            mode: true,\n            ready: false,\n            search: \"\",\n            regions: [\"World\", \"Africa\", \"Americas\", \"Asia\", \"Europe\", \"Oceania\"],\n        };\n\n        //this.ready = false;\n        this.backup = [];\n    }\n\n    async componentDidMount() {\n        this.setState({ countries: await getData(this.url) }, () => {\n            this.setState({ ready: true });\n            this.backup = [...this.state.countries];\n        });\n    }\n\n    render() {\n        let mode = this.state.mode ? styles.dark : styles.light;\n        let path = this.props.history.location.pathname.valueOf() === \"/\" ?  \n            <Controls\n                handleSearch={this.handleSearch}\n                search={this.state.search}\n                regions={this.state.regions}\n                handleSelect={this.handleSelect}\n                visible={this.state.showControls}\n            />\n        : '';\n        return (\n            <Switch>\n                <>\n                    <div className={mode}>\n                        <Header mode={this.state.mode} changeMode={this.changeMode} />\n                    <Container>\n                        {path}\n                        <Route exact path=\"/detail/:code\" render={({ match, history }) => <CountryDetails\n                            country={match.params.code}\n                            {...match}\n                                codeUrl={this.codeUrl}\n                            />}\n\n                        />\n                        \n                    <Route exact path=\"/\" component={(props) =>\n                        <>\n                        \n                        <div className={styles.countries}>\n                            \n                        {this.state.ready\n                            ? this.state.countries.map((country, index) => {\n                                \n                                return (\n                                <Country\n                                    key={index}\n                                    image={country.flag}\n                                    name={country.name}\n                                    population={country.population}\n                                    region={country.region}\n                                    capital={country.capital}\n                                    mode={this.state.mode}\n                                    showDetail={() => this.showDetail(country.alpha3Code)}\n                                />\n                                );\n                            })\n                            : null}\n\n                    \n                        </div>\n                        </>\n                    }/>\n        </Container>\n    </div>\n    </>\n</Switch>\n    );\n}\n\n    changeMode = () => {\n        this.setState((prevState) => ({ mode: !prevState.mode }));\n    };\n\n  //search\n    handleSearch = async (event) => {\n        await this.setState({ search: event.target.value });\n            let temp = [...this.backup];\n            let result = temp.filter((country) =>\n                country.name\n                .toLowerCase()\n                .includes(this.state.search.trim().toLowerCase())\n            );\n        \n        if (result.length >= 1) {\n            this.setState({ countries: [...result] });\n        } else {\n            this.setState({ countries: [...temp] });\n        }\n    };\n\n    handleSelect = async (event) => {\n        //Africa, Americas, Asia, Europe, Oceania\n        let urls = \"\";\n        switch (event.target.value) {\n        case \"World\":\n            urls = \"https://restcountries.eu/rest/v2/all\";\n            break;\n        default:\n            urls = `https://restcountries.eu/rest/v2/region/${event.target.value}`;\n            break;\n        }\n        this.setState({ countries: await getData(urls) });\n    };\n\n  // shows the details of the country.\n    showDetail = (country) => {\n        this.props.history.push(`/detail/${country}`);\n    }\n\n}\n\nexport default withRouter (CountryContainer);\n// export default CountryContainer;\n//TODO: The search is breaking when bogus numbers are put in.\n/**\n *\n * Parent container passes mode to each child component\n * to tell it to render dark or light mode.\n */\n","import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\nimport CountryContainer from './components/countriesContainer/countriesContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CountryContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}